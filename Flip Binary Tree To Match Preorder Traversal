/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int i=0;
    vector<int>vec;
    bool f(TreeNode*root,vector<int>&v){
        if(!root)return 1;
        if(root->val!=v[i++])return 0;
        if(root->left&&root->left->val!=v[i]){
            vec.push_back(root->val);
            return f(root->right,v) && f(root->left,v);
        }
        return f(root->left,v) && f(root->right,v);
    }
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {
        return f(root,voyage)?vec:vector<int>{-1};
    }
};
