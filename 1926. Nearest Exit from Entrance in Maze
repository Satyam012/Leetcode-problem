class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& e) {
        int m=maze.size(),n=maze[0].size();
        queue<pair<int,int>>quee;
        int ans=-1,cnt=0;
        vector<vector<bool>>vis(m,vector<bool>(n,false));
        vis[e[0]][e[1]]=true;
        quee.push({e[0]-1,e[1]});
        quee.push({e[0]+1,e[1]});
        quee.push({e[0],e[1]+1});
        quee.push({e[0],e[1]-1});
        while(!quee.empty()){
            cnt++;
            int size=quee.size();
            for(int i=0;i<size;i++){
                int x=quee.front().first,y=quee.front().second;
                quee.pop();
                if(x<0||x>=m||y<0||y>=n || vis[x][y]==true || maze[x][y]=='+' )continue;
                if(x==0 || x==m-1 || y==0 || y==n-1)return cnt;
                vis[x][y]=true;
                
                quee.push({x-1,y});
                quee.push({x+1,y});
                quee.push({x,y+1});
                quee.push({x,y-1});
            }
        }
        return -1;
    }
};
