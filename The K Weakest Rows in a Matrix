class Solution {
public:
    int search(vector<int>mat){
        int l=0,h=mat.size()-1;
        while(l<=h){
            int mid=(l+h)/2;
            if(mat[mid]==1)l=mid+1;
            else h=mid-1;
        }
        return l;
    }
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        priority_queue<pair<int,int>>q;
        for(int i=0;i<mat.size();i++){
            int x=search(mat[i]);
            if(q.size()<k)q.push({x,i});
            else{
                pair<int,int>p=q.top();
                if(p.first<=x)continue;
                else{
                    q.pop();
                    q.push({x,i});
                }
            }
        }
        vector<int>v;
        while(!q.empty()){
            v.push_back(q.top().second);
            q.pop();
        }
        reverse(v.begin(),v.end());
        return v;
    }
};
