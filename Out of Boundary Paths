class Solution {
public:
    long long dp[51][51][51],mod=1e9+7;
    int findPath(int m, int n, int maxMove, int startRow, int startColumn) {
        if(startRow<0 || startRow>=m || startColumn<0 || startColumn>=n)return 1;
        if(maxMove==0)return 0;
        if(dp[startRow][startColumn][maxMove]!=-1)return dp[startRow][startColumn][maxMove];
        return dp[startRow][startColumn][maxMove]=(findPath(m,n,maxMove-1,startRow+1,startColumn)%mod
            +findPath(m,n,maxMove-1,startRow-1,startColumn)%mod
            +findPath(m,n,maxMove-1,startRow,startColumn+1)%mod
            +findPath(m,n,maxMove-1,startRow,startColumn-1)%mod)%mod;
        
    }
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        if(maxMove==0)return 0;
        memset(dp,-1,sizeof dp);
        return findPath(m,n,maxMove,startRow,startColumn);
    }
};
