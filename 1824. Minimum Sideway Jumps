
class Solution {
public:
    int f(vector<vector<int>>&dp,int pos,int i,int n,vector<int>&arr){
        //when we reach finale position then we return 0 value
        if(i+1==n)return 0;
        
        if(dp[pos][i]!=1e6)return dp[pos][i];
        
        //if in next index there is a obstacles on current position then we will change our direction
        if(pos==arr[i+1]){
            int x=(pos+1)%3;
            int y=(pos+2)%3;
            if(x==0)x=3;
            if(y==0)y=3;
            
            //we will check in both position for getting minimum side jump
            dp[pos][i]= 1+min(f(dp,x,i,n,arr),f(dp,y,i,n,arr));
        }
        else dp[pos][i]=f(dp,pos,i+1,n,arr); //if there is no obstacles then we will go further
        return dp[pos][i];
    }
    int minSideJumps(vector<int>& arr) {
        int n=arr.size();
        vector<vector<int>>dp(4,vector<int>(n+2,1e6));
        return f(dp,2,0,arr.size(),arr);
    }
};
