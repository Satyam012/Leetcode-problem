/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root)return "#";
        return to_string(root->val)+','+serialize(root->left)+','+serialize(root->right);
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        return deserial(data);
    }
    TreeNode*deserial(string &data){
        if(data[0]=='#'){
            if(data.length()>1)data=data.substr(2);
            return NULL;
        }
        else{
            TreeNode*node=new TreeNode(f(data));
            node->left=deserial(data);
            node->right=deserial(data);
            return node;
        }
    }
    int f(string &s){
        int pos=s.find(',');
        int val=stoi(s.substr(0,pos));
        s=s.substr(pos+1);
        return val;
    }
};
